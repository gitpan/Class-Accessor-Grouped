NAME
    Class::Accessor::Grouped - Lets you build groups of accessors

SYNOPSIS
DESCRIPTION
    This class lets you build groups of accessors that will call different
    getters and setters.

METHODS
  mk_group_accessors
    Arguments: $group, @fieldspec
        Returns: none

    Creates a set of accessors in a given group.

    $group is the name of the accessor group for the generated accessors;
    they will call get_$group($field) on get and set_$group($field, $value)
    on set.

    If you want to mimic Class::Accessor's mk_accessors $group has to be
    'simple' to tell Class::Accessor::Grouped to use its own get_simple and
    set_simple methods.

    @fieldspec is a list of field/accessor names; if a fieldspec is a scalar
    this is used as both field and accessor name, if a listref it is
    expected to be of the form [ $accessor, $field ].

  mk_group_ro_accessors
    Arguments: $group, @fieldspec
        Returns: none

    Creates a set of read only accessors in a given group. Identical to
    "mk_group_accessors" but accessors will throw an error if passed a value
    rather than setting the value.

  mk_group_wo_accessors
    Arguments: $group, @fieldspec
        Returns: none

    Creates a set of write only accessors in a given group. Identical to
    "mk_group_accessors" but accessors will throw an error if not passed a
    value rather than getting the value.

  make_group_accessor
    Arguments: $group, $field, $method
        Returns: \&accessor_coderef ?

    Called by mk_group_accessors for each entry in @fieldspec. Either
    returns a coderef which will be installed at "&__PACKAGE__::$method", or
    returns "undef" if it elects to install the coderef on its own.

  make_group_ro_accessor
    Arguments: $group, $field, $method
        Returns: \&accessor_coderef ?

    Called by mk_group_ro_accessors for each entry in @fieldspec. Either
    returns a coderef which will be installed at "&__PACKAGE__::$method", or
    returns "undef" if it elects to install the coderef on its own.

  make_group_wo_accessor
    Arguments: $group, $field, $method
        Returns: \&accessor_coderef ?

    Called by mk_group_wo_accessors for each entry in @fieldspec. Either
    returns a coderef which will be installed at "&__PACKAGE__::$method", or
    returns "undef" if it elects to install the coderef on its own.

  get_simple
    Arguments: $field
        Returns: $value

    Simple getter for hash-based objects which returns the value for the
    field name passed as an argument.

  set_simple
    Arguments: $field, $new_value
        Returns: $new_value

    Simple setter for hash-based objects which sets and then returns the
    value for the field name passed as an argument.

  get_inherited
    Arguments: $field
        Returns: $value

    Simple getter for Classes and hash-based objects which returns the value
    for the field name passed as an argument. This behaves much like
    Class::Data::Accessor where the field can be set in a base class,
    inherited and changed in subclasses, and inherited and changed for
    object instances.

  set_inherited
    Arguments: $field, $new_value
        Returns: $new_value

    Simple setter for Classes and hash-based objects which sets and then
    returns the value for the field name passed as an argument. When called
    on a hash-based object it will set the appropriate hash key value. When
    called on a class, it will set a class level variable.

    Note:: This method will die if you try to set an object variable on a
    non hash-based object.

  get_component_class
    Arguments: $field
        Returns: $value

    Gets the value of the specified component class.

        __PACKAGE__->mk_group_accessors('component_class' => 'result_class');

        $self->result_class->method();

        ## same as
        $self->get_component_class('result_class')->method();

  set_component_class
    Arguments: $field, $class
        Returns: $new_value

    Inherited accessor that automatically loads the specified class before
    setting it. This method will die if the specified class could not be
    loaded.

        __PACKAGE__->mk_group_accessors('component_class' => 'result_class');
        __PACKAGE__->result_class('MyClass');

        $self->result_class->method();

  get_super_paths
    Returns a list of 'parent' or 'super' class names that the current class
    inherited from.

PERFORMANCE
    To provide total flexibility Class::Accessor::Grouped calls methods
    internally while performing get/set actions, which makes it noticeably
    slower than similar modules. To compensate, this module will
    automatically use the insanely fast Class::XSAccessor to generate the
    "simple"-group accessors, if Class::XSAccessor >= 1.06 is available on
    your system.

  Benchmark
    This is the result of a set/get/set loop benchmark on perl 5.12.1 with
    thread support, showcasing most popular accessor builders: Moose, Mouse,
    CAF, CAF_XS and XSA:

                Rate     CAG   moOse     CAF HANDMADE  CAF_XS moUse_XS CAG_XS     XSA
     CAG      1777/s      --    -27%    -29%     -36%    -62%     -67%   -72%    -73%
     moOse    2421/s     36%      --     -4%     -13%    -48%     -55%   -61%    -63%
     CAF      2511/s     41%      4%      --     -10%    -47%     -53%   -60%    -61%
     HANDMADE 2791/s     57%     15%     11%       --    -41%     -48%   -56%    -57%
     CAF_XS   4699/s    164%     94%     87%      68%      --     -13%   -25%    -28%
     moUse_XS 5375/s    203%    122%    114%      93%     14%       --   -14%    -18%
     CAG_XS   6279/s    253%    159%    150%     125%     34%      17%     --     -4%
     XSA      6515/s    267%    169%    159%     133%     39%      21%     4%      --

    Benchmark program is available in the root of the <repository>:

  Notes on Class::XSAccessor
    While Class::XSAccessor works surprisingly well for the amount of black
    magic it tries to pull off, it's still black magic. At present (Sep
    2010) the module is known to have problems on Windows under heavy
    thread-stress (e.g. Win32+Apache+mod_perl). Thus for the time being
    Class::XSAccessor will not be used automatically if you are running
    under "MSWin32".

    You can force the use of Class::XSAccessor before creating a particular
    "simple" accessor by either manipulating the global variable
    $Class::Accessor::Grouped::USE_XS, or you can do so before runtime via
    the "CAG_USE_XS" environment variable.

AUTHORS
    Matt S. Trout <mst@shadowcatsystems.co.uk>

    Christopher H. Laco <claco@chrislaco.com>

CONTRIBUTORS
    Caelum: Rafael Kitover <rkitover@cpan.org>

    groditi: Guillermo Roditi <groditi@cpan.org>

    Jason Plum <jason.plum@bmmsi.com>

    ribasushi: Peter Rabbitson <ribasushi@cpan.org>

COPYRIGHT & LICENSE
    Copyright (c) 2006-2010 Matt S. Trout <mst@shadowcatsystems.co.uk>

    This program is free software; you can redistribute it and/or modify it
    under the same terms as perl itself.

